name: normal_build

on:
  push:
    # Publish `$default-branch` as Docker `latest` image.
    branches:
      - $default-branch

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

jobs:
  test:
    runs-on: ubuntu-20.04
    steps:
    - name: checkout repo
      uses: actions/checkout@v2
      with:
        submodules: 'true'
        fetch-depth: 0

    - name: fetch all tags
      run: |
        git fetch --force --tags

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        pip3 install -U --user -r misc/requirements.txt

    - name: Build firmware (release version)
      run: |
        export PATH=$PATH:$HOME/.local/bin
        platformio run -j 16 -e release
      env:
        FIRMWARE_PUBLIC_KEY: ${{ secrets.FIRMWARE_PUBLIC_KEY }}
        FIRMWARE_SIGNING_PKEY: ${{ secrets.FIRMWARE_SIGNING_PKEY }}

    # TODO: Add some firmware testing here...

    - name: prepare firmware
      run: |
        FW_PATH=$(find . -name firmware\*.sig)
        FW_NAME=$(basename $FW_PATH)
        FW_VERSION=$(echo $FW_NAME | sed -E 's#firmware\.(v.*)\.sig#\1#g')

        FW_OUTPUT=$(pwd)/output
        echo "::set-output name=path::$FW_OUTPUT"
        mkdir -p $FW_OUTPUT
        cp $FW_PATH $FW_OUTPUT
        echo "{\"file\":\"$FW_NAME\",\"version\":\"$FW_VERSION\"}" | jq . > $FW_OUTPUT/firmware.json
      id: prepare_firmware

    - name: upload firmware to artifacts
      uses: actions/upload-artifact@v2
      with:
        name: firmware
        path: ${{ steps.prepare_firmware.outputs.path }}/

  create_release:
    needs: test
    runs-on: ubuntu-20.04
    if: github.event_name == 'push'

    steps:
    - name: checkout repo
      uses: actions/checkout@v2
      with:
        submodules: 'true'
        fetch-depth: 0

    - name: fetch all tags
      run: |
        git fetch --force --tags

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        pip3 install -U --user -r misc/requirements.txt

    - name: Build firmware (release version)
      run: |
        export PATH=$PATH:$HOME/.local/bin
        platformio run -j 16 -e release
      env:
        FIRMWARE_PUBLIC_KEY: ${{ secrets.FIRMWARE_PUBLIC_KEY }}
        FIRMWARE_SIGNING_PKEY: ${{ secrets.FIRMWARE_SIGNING_PKEY }}

    - name: get firmware name and path
      run: |
        FW_PATH=$(find . -name firmware\*.sig)
        echo "::set-output name=path::$FW_PATH"
        FW_NAME=$(basename $FW_PATH)
        echo "::set-output name=name::$FW_NAME"
      id: fw_path

    - name: extract version string
      run: |
        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

        echo "::set-output name=version::$VERSION"
      id: version_string

    - name: create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.version_string.outputs.version }}
        draft: false
        prerelease: false

    - name: upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.fw_path.outputs.path }}
        asset_name: firmware.sig
        asset_content_type: application/pgp-signature
